<section phx-drop-target={@uploads.bank_statement.ref} class="rounded-2xl bg-zinc-50 px-2 py-4">
  <h2 class="font-semibold mb-4">
    Select CSV files to upload, or drag them here.
  </h2>

  <%= for entry <- @uploads.bank_statement.entries do %>
    <article class="upload-entry">
      <p><%= entry.client_name %></p>

      <progress value={entry.progress} max="100"><%= entry.progress %>%</progress>

      <button
        type="button"
        phx-click="cancel-upload"
        phx-value-ref={entry.ref}
        aria-label="cancel"
      >
        &times;
      </button>

      <%= for err <- upload_errors(@uploads.bank_statement, entry) do %>
        <p class="alert alert-danger"><%= error_to_string(err) %></p>
      <% end %>
    </article>
  <% end %>

  <%= for err <- upload_errors(@uploads.bank_statement) do %>
    <p class="alert alert-danger"><%= error_to_string(err) %></p>
  <% end %>

  <form id="upload-form" phx-submit="save" phx-change="validate">
    <.live_file_input upload={@uploads.bank_statement} />
    <button
      type="submit"
      class="rounded-lg bg-zinc-200 px-2 py-1 text-[0.8125rem] font-semibold leading-6 text-zinc-900 hover:bg-zinc-300/80 active:text-zinc-900/70"
    >
      Add
    </button>
  </form>
</section>

<%= if Enum.any?(@transactions) do %>
  <h3 class="font-semibold">Loaded files</h3>
<% end %>

<ul class="list-decimal">
  <%= for {filename, content} <- @transactions do %>
    <li>
      <%= filename %> <%= if Csv.is_card?(content), do: "(card)", else: "(checking)" %>
    </li>
  <% end %>
</ul>

<%= if Enum.any?(@transactions) do %>
  <h3 class="font-semibold">By category/date</h3>

  <% grouped =
    @transactions
    |> Map.values()
    |> Csv.load_and_flatten()
    |> Enum.group_by(&{&1["category"], &1["date"].month}, & &1) %>

  <table>
    <tr>
      <th></th>
      <%= for m <- Csv.get_months(grouped) do %>
        <th><%= m %></th>
      <% end %>
    </tr>

    <%= for c <- Csv.get_categories(grouped) do %>
      <tr>
        <td><%= c %></td>

        <%= for m <- Csv.get_months(grouped) do %>
          <% sum = grouped |> Map.get({c, m}, []) |> Enum.map(& &1["amount"]) |> Enum.sum() %>
          <td><%= (1.0 * sum) |> :erlang.float_to_binary([:compact, decimals: 2]) %></td>
        <% end %>
      </tr>
    <% end %>

    <tr>
      <td>total</td>
      <% grouped_by_month =
        @transactions
        |> Map.values()
        |> Csv.load_and_flatten()
        |> Enum.group_by(& &1["date"].month, & &1["amount"]) %>

      <%= for m <- Csv.get_months(grouped) do %>
        <% sum = grouped_by_month[m] |> Enum.sum() %>
        <th>
          <%= (1.0 * sum)
          |> :erlang.float_to_binary([:compact, decimals: 2])
          |> String.pad_leading(10) %>
        </th>
      <% end %>
    </tr>
  </table>
<% end %>
